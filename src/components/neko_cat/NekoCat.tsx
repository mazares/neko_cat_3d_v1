/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useFrame } from "@react-three/fiber";
import { useGLTF } from "@react-three/drei";
import type { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    main_arm_Cube007: THREE.Mesh;
    body_Cube012: THREE.Mesh;
  };
  materials: {
    Material: THREE.MeshStandardMaterial;
  };
};

interface NekoCatProps {
  position?: [number, number, number];
  rotation?: [number, number, number];
  material?: THREE.Material;
}

export function RotatingNekoCat({
  position = [0, 0, 0],
  rotation = [0, 0, 0],
  material
}: NekoCatProps) {
  const ref = useRef<THREE.Group>(null);

  useFrame(() => {
    if (ref.current) {
      ref.current.rotation.y += 0.01;
    }
  });

  return (
    <group ref={ref} position={position} rotation={rotation}>
      <mesh material={material}>
        <boxGeometry args={[1, 1, 1]} />
      </mesh>
    </group>
  );
}

export default function NekoCat(props: React.JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/neko.glb") as unknown as GLTFResult;

  const group = useRef<THREE.Group>(null!);

  return (
    <group ref={group} {...props} dispose={null} scale={0.5}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.main_arm_Cube007.geometry}
        material={materials.Material}
        position={[0, 0, 0]}
        rotation={[0, 0, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.body_Cube012.geometry}
        material={materials.Material}
      />
    </group>
  );
}

useGLTF.preload("/neko.glb");
